#!/usr/local/bin/python3
import json
import sys

printRaw = False

# Load the json file into parsed
if (len(sys.argv) > 1):
    with open(sys.argv[1], 'r') as handle:
        parsed = json.load(handle)
else:
    parsed = ""
    for line in sys.stdin:
        parsed += line
        parsed = json.loads(parsed)


def dumpSize(data, element, depth):
    global printRaw
    tabs=""
    for x in range(depth):
        tabs += "\t"

    if (data is None):
        raw = json.dumps(element, separators=(',',':'))
    else:
        raw = json.dumps(data[element], separators=(',',':'))

    size = len(raw)
    if (data is not None):
        size += len(str(element)) + 1
    size = "" + str(size) + "\t"

    if (not printRaw and data is not None):
        raw = "..."
    tabs = ""
    if (data is None):
        print (tabs + size + raw)
    else:
        print (tabs + size + str(element) + " : " + raw)

def iterate(data, depth=0, maxDepth=-1):
    try:
        for element in data:
            if (isinstance(data, list)):
                dumpSize(None, element, depth)
                if (maxDepth == -1 or depth < maxDepth):
                    iterate(element, depth=depth+1)
            else:
                dumpSize(data, element, depth)
                if (element in data):
                    if (maxDepth == -1 or depth < maxDepth):
                        iterate(data[element], depth=depth+1)
    except (TypeError, IndexError) as e:
        pass


iterate(parsed, maxDepth=0)
